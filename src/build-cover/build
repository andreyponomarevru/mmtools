#!/bin/bash

set -eu -o pipefail

readonly PHOTO_PATH_ARG="$1"
readonly DATE_ARG="$2"
readonly TRACK_PATHS_FILE="$3"
readonly EXTRACTED_COVERS_DIR="$4"

readonly ARTISTS_DUMP_FILE="./build/artists_dump.txt"
readonly ARTISTS_UNIQUE_FILE="./build/artists.txt"

readonly COMPILED_SVG_NAME="temp_compiled"
readonly COVER_SIZE=1600
SVG=$(
  cat <<-END
<svg width="1600" height="1600" version="1.1" viewBox="0 0 423.33 423.33" xml:space="preserve" xmlns="http://www.w3.org/2000/svg">
  
  <text id="name" transform="scale(1.0131 .98706)" x="383.15259" y="118.50788" style="fill:#000000;font-family:Montserrat;font-size:14.817px;font-weight:900;letter-spacing:0px;line-height:1.25;stroke-width:.26458;text-align:left;text-anchor:middle;word-spacing:0px;writing-mode:tb-rl" xml:space="preserve">          
    <tspan x="382.15259" y="112" style="fill:#ffffff;font-family:Montserrat;font-size:14.817px;font-weight:900;stroke-width:.26458;text-align:center;text-anchor:middle;writing-mode:tb-rl">Андрей Пономарев</tspan>
  </text>
  
  <text transform="matrix(1.0131 0 0 .98706 2.2413 -131.09)" x="25.5" y="195" style="fill:#ffffff;font-family:Montserrat;font-size:9.5249px;font-weight:500;inline-size:361.326;letter-spacing:.26458px;line-height:1.5;stroke-width:.26458;white-space:pre;word-spacing:0px" xml:space="preserve"><tspan x="24.372942" y="202.29692" style="font-size:55px;font-variant-numeric:oldstyle-nums;font-weight:300;line-height:1;stroke-width:.79374">${DATE_ARG}</tspan></text>

</svg>
END
)
readonly SVG

function svg2png() {
  inkscape \
    --export-background-opacity=0 \
    --export-type="png" \
    "./build/$COMPILED_SVG_NAME.svg"
}

function create_randomly_scattered_images() {
  # Random sort makes the overlap (order) of covers on image different each time
  local -r list="$(find "$EXTRACTED_COVERS_DIR" -type f | sort --random-sort | tr '\n' ' ')"
  convert -size 1600x1600 xc:none ./build/tmp-result.png
  (
    for img in $list; do
      echo "file = $img"
      echo "$img" "+++++++++++++++++++++++++++"
      angle=$(convert xc: -format "%[fx:round(-22.5+45*(rand()))]" info:)
      xoff=$(convert xc: -format "%[fx:round(1600*rand())]" info:)
      yoff=$(convert xc: -format "%[fx:round(1600*rand())]" info:)
      #echo >&2 "angle=$angle; xoff=$xoff; yoff=$yoff"
      convert "$img" -resize 400x -background none -rotate "$angle" -set page "+${xoff}+${yoff}" miff:-
    done
  ) #| convert ./build/tmp-result.png - -background none -layers merge +repage ./build/scattered.png
}

function mergeImages() {
  local -r PATH_PHOTO="./build/photo.jpg"
  local -r PATH_SVG="./build/${COMPILED_SVG_NAME}.png"
  # local -r PATH_LATEX_TEXT="./build/artists.png"
  local -r PATH_SCATTERED_COVERS="./build/scattered.png"

  convert \
    "$PATH_PHOTO" "$PATH_SCATTERED_COVERS" "$PATH_SVG" \
    -density 300 \
    -geometry +0+0 \
    -background none \
    -layers Flatten \
    -gravity center \
    -quality 100 \
    "./build/result-$(date +%s).jpg"
}

################################################################################
# Main

# Generate unique, formatted artists list from song paths

rm --force "$ARTISTS_DUMP_FILE" "$ARTISTS_UNIQUE_FILE"
touch "$ARTISTS_DUMP_FILE" "$ARTISTS_UNIQUE_FILE"

printf '\nGetting artists from ID3 tags ...\n\n'

while read -r path; do
  operon list -t "$path" |
    grep ":artist" |
    cut --delimiter=':' --field='2'
done <"${TRACK_PATHS_FILE?}" >"$ARTISTS_DUMP_FILE"

# Use awk to remove the duplicate lines preserving their order in the file
# https://iridakos.com/programming/2019/05/16/remove-duplicate-lines-preserving-order-linux
awk '!visited[$0]++' "./$ARTISTS_DUMP_FILE" |
  sed -z 's/\n*$//;s/\n/, /g;s/$/\n/' |
  sed "s/&/\\\&/g" >"./$ARTISTS_UNIQUE_FILE"

cat "./$ARTISTS_UNIQUE_FILE"

rm "$ARTISTS_DUMP_FILE"

printf '%s' "$ARTISTS_UNIQUE_FILE"

# Build cover

#xelatex \
#  --shell-escape \
#  -output-directory=./build \
#  ./src/build-cover/artists.tex

#convert \
#  -density 600 \
#  -quality 100 \
#  -resize 1600x1600 \
#  ./build/artists.pdf ./build/artists.png

touch "./build/$COMPILED_SVG_NAME.svg"
printf "%s" "$SVG" >"./build/$COMPILED_SVG_NAME.svg"

svg2png

convert \
  -resize "x$COVER_SIZE" \
  -crop "${COVER_SIZE}x${COVER_SIZE}+0+0" \
  -gravity center \
  -quality 100 \
  "$PHOTO_PATH_ARG" "./build/photo.jpg"

for ((i = 0; i <= 30; i++)); do
  create_randomly_scattered_images
  mergeImages
done

################################################################################
# Cleanup

rm --force \
  ./build/*.{pdf,svg,log,aux,txt} \
  ./build/photo.jpg
